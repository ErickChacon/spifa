// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// adaptive_haario
Rcpp::List adaptive_haario(arma::vec mean, arma::mat Sigma, int iter);
RcppExport SEXP _spifa_adaptive_haario(SEXP meanSEXP, SEXP SigmaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(adaptive_haario(mean, Sigma, iter));
    return rcpp_result_gen;
END_RCPP
}
// variance
arma::mat variance(arma::mat X);
RcppExport SEXP _spifa_variance(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(variance(X));
    return rcpp_result_gen;
END_RCPP
}
// adaptive_haario_vanish
Rcpp::List adaptive_haario_vanish(arma::vec mean, arma::mat Sigma, int iter);
RcppExport SEXP _spifa_adaptive_haario_vanish(SEXP meanSEXP, SEXP SigmaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(adaptive_haario_vanish(mean, Sigma, iter));
    return rcpp_result_gen;
END_RCPP
}
// am_vanish_scaling
Rcpp::List am_vanish_scaling(arma::vec mean, arma::mat Sigma, int iter);
RcppExport SEXP _spifa_am_vanish_scaling(SEXP meanSEXP, SEXP SigmaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(am_vanish_scaling(mean, Sigma, iter));
    return rcpp_result_gen;
END_RCPP
}
// vec2mat
arma::mat vec2mat(arma::vec x, int nrow, int ncol);
RcppExport SEXP _spifa_vec2mat(SEXP xSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2mat(x, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// vec2matt
arma::mat vec2matt(arma::vec x, int nrow, int ncol);
RcppExport SEXP _spifa_vec2matt(SEXP xSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2matt(x, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// vecsub
arma::vec vecsub(arma::vec x, int first_index, int n_length);
RcppExport SEXP _spifa_vecsub(SEXP xSEXP, SEXP first_indexSEXP, SEXP n_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type first_index(first_indexSEXP);
    Rcpp::traits::input_parameter< int >::type n_length(n_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(vecsub(x, first_index, n_length));
    return rcpp_result_gen;
END_RCPP
}
// vecsub1
double vecsub1(arma::vec x, int index);
RcppExport SEXP _spifa_vecsub1(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(vecsub1(x, index));
    return rcpp_result_gen;
END_RCPP
}
// matsub1
double matsub1(arma::mat x, int index_row, int index_col);
RcppExport SEXP _spifa_matsub1(SEXP xSEXP, SEXP index_rowSEXP, SEXP index_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type index_row(index_rowSEXP);
    Rcpp::traits::input_parameter< int >::type index_col(index_colSEXP);
    rcpp_result_gen = Rcpp::wrap(matsub1(x, index_row, index_col));
    return rcpp_result_gen;
END_RCPP
}
// TST
arma::mat TST(arma::mat mgp_Sigma, arma::mat T);
RcppExport SEXP _spifa_TST(SEXP mgp_SigmaSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mgp_Sigma(mgp_SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(TST(mgp_Sigma, T));
    return rcpp_result_gen;
END_RCPP
}
// subset_cpp
Rcpp::List subset_cpp(arma::mat X, arma::vec y);
RcppExport SEXP _spifa_subset_cpp(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(subset_cpp(X, y));
    return rcpp_result_gen;
END_RCPP
}
// vec2trimatl
arma::mat vec2trimatl(arma::vec x, int K, bool diag);
RcppExport SEXP _spifa_vec2trimatl(SEXP xSEXP, SEXP KSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2trimatl(x, K, diag));
    return rcpp_result_gen;
END_RCPP
}
// vec2trimatl_old
arma::mat vec2trimatl_old(arma::vec x, int K, bool diag);
RcppExport SEXP _spifa_vec2trimatl_old(SEXP xSEXP, SEXP KSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2trimatl_old(x, K, diag));
    return rcpp_result_gen;
END_RCPP
}
// vec2trimatl_test
arma::mat vec2trimatl_test(arma::vec x, int K, bool diag);
RcppExport SEXP _spifa_vec2trimatl_test(SEXP xSEXP, SEXP KSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2trimatl_test(x, K, diag));
    return rcpp_result_gen;
END_RCPP
}
// trimatl2vec
arma::vec trimatl2vec(arma::mat L, bool diag);
RcppExport SEXP _spifa_trimatl2vec(SEXP LSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(trimatl2vec(L, diag));
    return rcpp_result_gen;
END_RCPP
}
// vec2chol_corr
arma::mat vec2chol_corr(arma::vec x, int K);
RcppExport SEXP _spifa_vec2chol_corr(SEXP xSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2chol_corr(x, K));
    return rcpp_result_gen;
END_RCPP
}
// vec2chol_corr2
Rcpp::List vec2chol_corr2(arma::vec x, int K);
RcppExport SEXP _spifa_vec2chol_corr2(SEXP xSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2chol_corr2(x, K));
    return rcpp_result_gen;
END_RCPP
}
// chol_corr2vec
arma::vec chol_corr2vec(arma::mat L_chol);
RcppExport SEXP _spifa_chol_corr2vec(SEXP L_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type L_chol(L_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_corr2vec(L_chol));
    return rcpp_result_gen;
END_RCPP
}
// solve_sympd
arma::mat solve_sympd(arma::mat A, arma::mat B);
RcppExport SEXP _spifa_solve_sympd(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_sympd(A, B));
    return rcpp_result_gen;
END_RCPP
}
// solve_sympd_chol
arma::mat solve_sympd_chol(arma::mat A_chol, arma::mat B);
RcppExport SEXP _spifa_solve_sympd_chol(SEXP A_cholSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A_chol(A_cholSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_sympd_chol(A_chol, B));
    return rcpp_result_gen;
END_RCPP
}
// rimvnorm_Q_eig
arma::vec rimvnorm_Q_eig(arma::mat Q);
RcppExport SEXP _spifa_rimvnorm_Q_eig(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(rimvnorm_Q_eig(Q));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_rest_Q
arma::vec rmvnorm_rest_Q(arma::vec mu, arma::mat Q, arma::mat A, arma::vec e);
RcppExport SEXP _spifa_rmvnorm_rest_Q(SEXP muSEXP, SEXP QSEXP, SEXP ASEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_rest_Q(mu, Q, A, e));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_Q
arma::vec rmvnorm_Q(arma::vec mu, arma::mat Q);
RcppExport SEXP _spifa_rmvnorm_Q(SEXP muSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_Q(mu, Q));
    return rcpp_result_gen;
END_RCPP
}
// plop
double plop();
RcppExport SEXP _spifa_plop() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(plop());
    return rcpp_result_gen;
END_RCPP
}
// gamcpp
Rcpp::List gamcpp(arma::vec y, arma::mat X, arma::mat D, double sigma2, double tau2, int niter);
RcppExport SEXP _spifa_gamcpp(SEXP ySEXP, SEXP XSEXP, SEXP DSEXP, SEXP sigma2SEXP, SEXP tau2SEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(gamcpp(y, X, D, sigma2, tau2, niter));
    return rcpp_result_gen;
END_RCPP
}
// probit_gp_adap
Rcpp::List probit_gp_adap(Rcpp::NumericVector y, arma::mat dist, arma::vec params, int iter, arma::mat Sigma_proposal);
RcppExport SEXP _spifa_probit_gp_adap(SEXP ySEXP, SEXP distSEXP, SEXP paramsSEXP, SEXP iterSEXP, SEXP Sigma_proposalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_proposal(Sigma_proposalSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_gp_adap(y, dist, params, iter, Sigma_proposal));
    return rcpp_result_gen;
END_RCPP
}
// probit_gp_am
Rcpp::List probit_gp_am(Rcpp::NumericVector y, arma::mat dist, arma::vec params, int iter, arma::mat Sigma_proposal);
RcppExport SEXP _spifa_probit_gp_am(SEXP ySEXP, SEXP distSEXP, SEXP paramsSEXP, SEXP iterSEXP, SEXP Sigma_proposalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_proposal(Sigma_proposalSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_gp_am(y, dist, params, iter, Sigma_proposal));
    return rcpp_result_gen;
END_RCPP
}
// probit_gp_am_scale
Rcpp::List probit_gp_am_scale(Rcpp::NumericVector y, arma::mat dist, arma::vec params, int iter, arma::mat Sigma_proposal, double target);
RcppExport SEXP _spifa_probit_gp_am_scale(SEXP ySEXP, SEXP distSEXP, SEXP paramsSEXP, SEXP iterSEXP, SEXP Sigma_proposalSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_proposal(Sigma_proposalSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_gp_am_scale(y, dist, params, iter, Sigma_proposal, target));
    return rcpp_result_gen;
END_RCPP
}
// probit_gp_chol
Rcpp::List probit_gp_chol(Rcpp::NumericVector y, arma::mat dist, arma::vec params, int iter, arma::mat Sigma_proposal);
RcppExport SEXP _spifa_probit_gp_chol(SEXP ySEXP, SEXP distSEXP, SEXP paramsSEXP, SEXP iterSEXP, SEXP Sigma_proposalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_proposal(Sigma_proposalSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_gp_chol(y, dist, params, iter, Sigma_proposal));
    return rcpp_result_gen;
END_RCPP
}
// probit_gp_chol2
Rcpp::List probit_gp_chol2(Rcpp::NumericVector y, arma::mat dist, arma::vec params, int iter, arma::mat Sigma_proposal);
RcppExport SEXP _spifa_probit_gp_chol2(SEXP ySEXP, SEXP distSEXP, SEXP paramsSEXP, SEXP iterSEXP, SEXP Sigma_proposalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_proposal(Sigma_proposalSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_gp_chol2(y, dist, params, iter, Sigma_proposal));
    return rcpp_result_gen;
END_RCPP
}
// probit_gp
Rcpp::List probit_gp(Rcpp::NumericVector y, arma::mat dist, arma::vec params, int iter, arma::mat Sigma_proposal);
RcppExport SEXP _spifa_probit_gp(SEXP ySEXP, SEXP distSEXP, SEXP paramsSEXP, SEXP iterSEXP, SEXP Sigma_proposalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_proposal(Sigma_proposalSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_gp(y, dist, params, iter, Sigma_proposal));
    return rcpp_result_gen;
END_RCPP
}
// dic_cpp
Rcpp::List dic_cpp(arma::vec y, arma::mat c, arma::mat a, arma::mat theta, int n, int q, int m, arma::mat L);
RcppExport SEXP _spifa_dic_cpp(SEXP ySEXP, SEXP cSEXP, SEXP aSEXP, SEXP thetaSEXP, SEXP nSEXP, SEXP qSEXP, SEXP mSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(dic_cpp(y, c, a, theta, n, q, m, L));
    return rcpp_result_gen;
END_RCPP
}
// spifa_cpp
Rcpp::List spifa_cpp(Rcpp::NumericVector response, arma::mat predictors, arma::mat distances, int nobs, int nitems, int nfactors, int ngp, int niter, int thin, bool standardize, arma::mat constrain_L, arma::mat constrain_T, arma::vec constrain_V_sd, arma::mat adap_Sigma, double adap_scale, double adap_C, double adap_alpha, double adap_accep_prob, arma::vec c_initial, arma::vec c_prior_mean, arma::vec c_prior_sd, arma::mat A_initial, arma::mat A_prior_mean, arma::mat A_prior_sd, arma::mat R_initial, double R_prior_eta, arma::mat B_initial, arma::mat B_prior_mean, arma::mat B_prior_sd, arma::vec sigmas_gp_initial, arma::vec sigmas_gp_mean, arma::vec sigmas_gp_sd, arma::vec phi_gp_initial, arma::vec phi_gp_mean, arma::vec phi_gp_sd, std::string model_type);
RcppExport SEXP _spifa_spifa_cpp(SEXP responseSEXP, SEXP predictorsSEXP, SEXP distancesSEXP, SEXP nobsSEXP, SEXP nitemsSEXP, SEXP nfactorsSEXP, SEXP ngpSEXP, SEXP niterSEXP, SEXP thinSEXP, SEXP standardizeSEXP, SEXP constrain_LSEXP, SEXP constrain_TSEXP, SEXP constrain_V_sdSEXP, SEXP adap_SigmaSEXP, SEXP adap_scaleSEXP, SEXP adap_CSEXP, SEXP adap_alphaSEXP, SEXP adap_accep_probSEXP, SEXP c_initialSEXP, SEXP c_prior_meanSEXP, SEXP c_prior_sdSEXP, SEXP A_initialSEXP, SEXP A_prior_meanSEXP, SEXP A_prior_sdSEXP, SEXP R_initialSEXP, SEXP R_prior_etaSEXP, SEXP B_initialSEXP, SEXP B_prior_meanSEXP, SEXP B_prior_sdSEXP, SEXP sigmas_gp_initialSEXP, SEXP sigmas_gp_meanSEXP, SEXP sigmas_gp_sdSEXP, SEXP phi_gp_initialSEXP, SEXP phi_gp_meanSEXP, SEXP phi_gp_sdSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type response(responseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< int >::type nitems(nitemsSEXP);
    Rcpp::traits::input_parameter< int >::type nfactors(nfactorsSEXP);
    Rcpp::traits::input_parameter< int >::type ngp(ngpSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type constrain_L(constrain_LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type constrain_T(constrain_TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type constrain_V_sd(constrain_V_sdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type adap_Sigma(adap_SigmaSEXP);
    Rcpp::traits::input_parameter< double >::type adap_scale(adap_scaleSEXP);
    Rcpp::traits::input_parameter< double >::type adap_C(adap_CSEXP);
    Rcpp::traits::input_parameter< double >::type adap_alpha(adap_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type adap_accep_prob(adap_accep_probSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c_initial(c_initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c_prior_mean(c_prior_meanSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c_prior_sd(c_prior_sdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A_initial(A_initialSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A_prior_mean(A_prior_meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A_prior_sd(A_prior_sdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R_initial(R_initialSEXP);
    Rcpp::traits::input_parameter< double >::type R_prior_eta(R_prior_etaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B_initial(B_initialSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B_prior_mean(B_prior_meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B_prior_sd(B_prior_sdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigmas_gp_initial(sigmas_gp_initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigmas_gp_mean(sigmas_gp_meanSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigmas_gp_sd(sigmas_gp_sdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi_gp_initial(phi_gp_initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi_gp_mean(phi_gp_meanSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi_gp_sd(phi_gp_sdSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(spifa_cpp(response, predictors, distances, nobs, nitems, nfactors, ngp, niter, thin, standardize, constrain_L, constrain_T, constrain_V_sd, adap_Sigma, adap_scale, adap_C, adap_alpha, adap_accep_prob, c_initial, c_prior_mean, c_prior_sd, A_initial, A_prior_mean, A_prior_sd, R_initial, R_prior_eta, B_initial, B_prior_mean, B_prior_sd, sigmas_gp_initial, sigmas_gp_mean, sigmas_gp_sd, phi_gp_initial, phi_gp_mean, phi_gp_sd, model_type));
    return rcpp_result_gen;
END_RCPP
}
// predict_spifa_cpp
Rcpp::List predict_spifa_cpp(arma::mat samples_theta, arma::mat samples_corr_chol, arma::mat samples_corr, arma::mat samples_mgp_sd, arma::mat samples_mgp_phi, arma::mat samples_betas, Rcpp::NumericVector response, arma::mat predictors, arma::mat newpredictors, arma::mat distances, arma::mat newdist, arma::mat cross_distances, int nobs, int nitems, int nfactors, int ngp, int npred, int niter, int burnin, int thin, arma::mat constrain_L, arma::mat constrain_T, arma::vec constrain_V_sd, std::string model_type);
RcppExport SEXP _spifa_predict_spifa_cpp(SEXP samples_thetaSEXP, SEXP samples_corr_cholSEXP, SEXP samples_corrSEXP, SEXP samples_mgp_sdSEXP, SEXP samples_mgp_phiSEXP, SEXP samples_betasSEXP, SEXP responseSEXP, SEXP predictorsSEXP, SEXP newpredictorsSEXP, SEXP distancesSEXP, SEXP newdistSEXP, SEXP cross_distancesSEXP, SEXP nobsSEXP, SEXP nitemsSEXP, SEXP nfactorsSEXP, SEXP ngpSEXP, SEXP npredSEXP, SEXP niterSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP constrain_LSEXP, SEXP constrain_TSEXP, SEXP constrain_V_sdSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type samples_theta(samples_thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type samples_corr_chol(samples_corr_cholSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type samples_corr(samples_corrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type samples_mgp_sd(samples_mgp_sdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type samples_mgp_phi(samples_mgp_phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type samples_betas(samples_betasSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type response(responseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type newpredictors(newpredictorsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type newdist(newdistSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cross_distances(cross_distancesSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< int >::type nitems(nitemsSEXP);
    Rcpp::traits::input_parameter< int >::type nfactors(nfactorsSEXP);
    Rcpp::traits::input_parameter< int >::type ngp(ngpSEXP);
    Rcpp::traits::input_parameter< int >::type npred(npredSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type constrain_L(constrain_LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type constrain_T(constrain_TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type constrain_V_sd(constrain_V_sdSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_spifa_cpp(samples_theta, samples_corr_chol, samples_corr, samples_mgp_sd, samples_mgp_phi, samples_betas, response, predictors, newpredictors, distances, newdist, cross_distances, nobs, nitems, nfactors, ngp, npred, niter, burnin, thin, constrain_L, constrain_T, constrain_V_sd, model_type));
    return rcpp_result_gen;
END_RCPP
}
// predict2_spifa_cpp
Rcpp::List predict2_spifa_cpp(arma::mat samples_theta, arma::mat samples_corr_chol, arma::mat samples_corr, arma::mat samples_mgp_sd, arma::mat samples_mgp_phi, arma::mat samples_betas, Rcpp::NumericVector response, arma::mat predictors, arma::mat newpredictors, arma::mat distances, arma::mat newdist, arma::mat cross_distances, int nobs, int nitems, int nfactors, int ngp, int npred, int niter, int burnin, int thin, arma::mat constrain_L, arma::mat constrain_T, arma::vec constrain_V_sd, std::string model_type);
RcppExport SEXP _spifa_predict2_spifa_cpp(SEXP samples_thetaSEXP, SEXP samples_corr_cholSEXP, SEXP samples_corrSEXP, SEXP samples_mgp_sdSEXP, SEXP samples_mgp_phiSEXP, SEXP samples_betasSEXP, SEXP responseSEXP, SEXP predictorsSEXP, SEXP newpredictorsSEXP, SEXP distancesSEXP, SEXP newdistSEXP, SEXP cross_distancesSEXP, SEXP nobsSEXP, SEXP nitemsSEXP, SEXP nfactorsSEXP, SEXP ngpSEXP, SEXP npredSEXP, SEXP niterSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP constrain_LSEXP, SEXP constrain_TSEXP, SEXP constrain_V_sdSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type samples_theta(samples_thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type samples_corr_chol(samples_corr_cholSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type samples_corr(samples_corrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type samples_mgp_sd(samples_mgp_sdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type samples_mgp_phi(samples_mgp_phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type samples_betas(samples_betasSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type response(responseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type predictors(predictorsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type newpredictors(newpredictorsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type newdist(newdistSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cross_distances(cross_distancesSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< int >::type nitems(nitemsSEXP);
    Rcpp::traits::input_parameter< int >::type nfactors(nfactorsSEXP);
    Rcpp::traits::input_parameter< int >::type ngp(ngpSEXP);
    Rcpp::traits::input_parameter< int >::type npred(npredSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type constrain_L(constrain_LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type constrain_T(constrain_TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type constrain_V_sd(constrain_V_sdSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict2_spifa_cpp(samples_theta, samples_corr_chol, samples_corr, samples_mgp_sd, samples_mgp_phi, samples_betas, response, predictors, newpredictors, distances, newdist, cross_distances, nobs, nitems, nfactors, ngp, npred, niter, burnin, thin, constrain_L, constrain_T, constrain_V_sd, model_type));
    return rcpp_result_gen;
END_RCPP
}
// logit
double logit(double p);
RcppExport SEXP _spifa_logit(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(logit(p));
    return rcpp_result_gen;
END_RCPP
}
// logistic
double logistic(double x);
RcppExport SEXP _spifa_logistic(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic(x));
    return rcpp_result_gen;
END_RCPP
}
// ifa_gibbs_nonide
Rcpp::List ifa_gibbs_nonide(Rcpp::NumericVector y, int n, int q, int N, int m);
RcppExport SEXP _spifa_ifa_gibbs_nonide(SEXP ySEXP, SEXP nSEXP, SEXP qSEXP, SEXP NSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ifa_gibbs_nonide(y, n, q, N, m));
    return rcpp_result_gen;
END_RCPP
}
// ifa_gibbs_sp_cov
Rcpp::List ifa_gibbs_sp_cov(Rcpp::NumericVector y, arma::mat X, arma::mat dist, int n, int q, int m, arma::vec mgp_phi, arma::vec mgp_sd, arma::mat Corr, double sd_fix, arma::mat sigma_prop, arma::mat L, arma::mat T, double target, int niter);
RcppExport SEXP _spifa_ifa_gibbs_sp_cov(SEXP ySEXP, SEXP XSEXP, SEXP distSEXP, SEXP nSEXP, SEXP qSEXP, SEXP mSEXP, SEXP mgp_phiSEXP, SEXP mgp_sdSEXP, SEXP CorrSEXP, SEXP sd_fixSEXP, SEXP sigma_propSEXP, SEXP LSEXP, SEXP TSEXP, SEXP targetSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mgp_phi(mgp_phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mgp_sd(mgp_sdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Corr(CorrSEXP);
    Rcpp::traits::input_parameter< double >::type sd_fix(sd_fixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_prop(sigma_propSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(ifa_gibbs_sp_cov(y, X, dist, n, q, m, mgp_phi, mgp_sd, Corr, sd_fix, sigma_prop, L, T, target, niter));
    return rcpp_result_gen;
END_RCPP
}
// ifa_gibbs_sp
Rcpp::List ifa_gibbs_sp(Rcpp::NumericVector y, arma::mat dist, int n, int q, int m, arma::vec mgp_phi, arma::vec mgp_sd, arma::mat Corr, double sd_fix, arma::mat sigma_prop, arma::mat L, arma::mat T, double target, int niter);
RcppExport SEXP _spifa_ifa_gibbs_sp(SEXP ySEXP, SEXP distSEXP, SEXP nSEXP, SEXP qSEXP, SEXP mSEXP, SEXP mgp_phiSEXP, SEXP mgp_sdSEXP, SEXP CorrSEXP, SEXP sd_fixSEXP, SEXP sigma_propSEXP, SEXP LSEXP, SEXP TSEXP, SEXP targetSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mgp_phi(mgp_phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mgp_sd(mgp_sdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Corr(CorrSEXP);
    Rcpp::traits::input_parameter< double >::type sd_fix(sd_fixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_prop(sigma_propSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(ifa_gibbs_sp(y, dist, n, q, m, mgp_phi, mgp_sd, Corr, sd_fix, sigma_prop, L, T, target, niter));
    return rcpp_result_gen;
END_RCPP
}
// ifa_gibbs
Rcpp::List ifa_gibbs(Rcpp::NumericVector y, int n, int q, int N, int m);
RcppExport SEXP _spifa_ifa_gibbs(SEXP ySEXP, SEXP nSEXP, SEXP qSEXP, SEXP NSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ifa_gibbs(y, n, q, N, m));
    return rcpp_result_gen;
END_RCPP
}
// multi_lm
Rcpp::List multi_lm(arma::mat Y, arma::mat X, int iter, arma::mat proposal_corr_Sigma, arma::mat proposal_sigmas_Sigma);
RcppExport SEXP _spifa_multi_lm(SEXP YSEXP, SEXP XSEXP, SEXP iterSEXP, SEXP proposal_corr_SigmaSEXP, SEXP proposal_sigmas_SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type proposal_corr_Sigma(proposal_corr_SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type proposal_sigmas_Sigma(proposal_sigmas_SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_lm(Y, X, iter, proposal_corr_Sigma, proposal_sigmas_Sigma));
    return rcpp_result_gen;
END_RCPP
}
// name_samples_vec
Rcpp::StringVector name_samples_vec(int n_elem, std::string name);
RcppExport SEXP _spifa_name_samples_vec(SEXP n_elemSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_elem(n_elemSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(name_samples_vec(n_elem, name));
    return rcpp_result_gen;
END_RCPP
}
// name_samples_mat
Rcpp::StringVector name_samples_mat(int nrow, int ncol, std::string name);
RcppExport SEXP _spifa_name_samples_mat(SEXP nrowSEXP, SEXP ncolSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(name_samples_mat(nrow, ncol, name));
    return rcpp_result_gen;
END_RCPP
}
// name_samples_lower
Rcpp::StringVector name_samples_lower(int nrow, int ncol, std::string name, bool diag);
RcppExport SEXP _spifa_name_samples_lower(SEXP nrowSEXP, SEXP ncolSEXP, SEXP nameSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(name_samples_lower(nrow, ncol, name, diag));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm
double dmvnorm(arma::mat X, arma::mat Mean, arma::mat Sigma, bool logpdf);
RcppExport SEXP _spifa_dmvnorm(SEXP XSEXP, SEXP MeanSEXP, SEXP SigmaSEXP, SEXP logpdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logpdf(logpdfSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm(X, Mean, Sigma, logpdf));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_chol
double dmvnorm_chol(arma::mat X, arma::mat Mean, arma::mat L, bool logpdf);
RcppExport SEXP _spifa_dmvnorm_chol(SEXP XSEXP, SEXP MeanSEXP, SEXP LSEXP, SEXP logpdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< bool >::type logpdf(logpdfSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_chol(X, Mean, L, logpdf));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_cholinv
double dmvnorm_cholinv(arma::mat X, arma::mat Mean, arma::mat L_inv, bool logpdf);
RcppExport SEXP _spifa_dmvnorm_cholinv(SEXP XSEXP, SEXP MeanSEXP, SEXP L_invSEXP, SEXP logpdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L_inv(L_invSEXP);
    Rcpp::traits::input_parameter< bool >::type logpdf(logpdfSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_cholinv(X, Mean, L_inv, logpdf));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_prec
double dmvnorm_prec(arma::vec x, arma::vec mean, arma::mat sigma_inv);
RcppExport SEXP _spifa_dmvnorm_prec(SEXP xSEXP, SEXP meanSEXP, SEXP sigma_invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_inv(sigma_invSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_prec(x, mean, sigma_inv));
    return rcpp_result_gen;
END_RCPP
}
// dinvwish
double dinvwish(double v, arma::mat X, arma::mat S, bool logpdf);
RcppExport SEXP _spifa_dinvwish(SEXP vSEXP, SEXP XSEXP, SEXP SSEXP, SEXP logpdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type logpdf(logpdfSEXP);
    rcpp_result_gen = Rcpp::wrap(dinvwish(v, X, S, logpdf));
    return rcpp_result_gen;
END_RCPP
}
// dlkj_corr
double dlkj_corr(arma::mat R, double eta, bool logpdf);
RcppExport SEXP _spifa_dlkj_corr(SEXP RSEXP, SEXP etaSEXP, SEXP logpdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type logpdf(logpdfSEXP);
    rcpp_result_gen = Rcpp::wrap(dlkj_corr(R, eta, logpdf));
    return rcpp_result_gen;
END_RCPP
}
// dlkj_corr_chol
double dlkj_corr_chol(arma::mat L, double eta, bool logpdf);
RcppExport SEXP _spifa_dlkj_corr_chol(SEXP LSEXP, SEXP etaSEXP, SEXP logpdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type logpdf(logpdfSEXP);
    rcpp_result_gen = Rcpp::wrap(dlkj_corr_chol(L, eta, logpdf));
    return rcpp_result_gen;
END_RCPP
}
// dlkj_corr_free
double dlkj_corr_free(arma::vec x, int K, double eta, bool logpdf);
RcppExport SEXP _spifa_dlkj_corr_free(SEXP xSEXP, SEXP KSEXP, SEXP etaSEXP, SEXP logpdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type logpdf(logpdfSEXP);
    rcpp_result_gen = Rcpp::wrap(dlkj_corr_free(x, K, eta, logpdf));
    return rcpp_result_gen;
END_RCPP
}
// dlkj_corr_free2
double dlkj_corr_free2(arma::vec x, int K, double eta, bool logpdf);
RcppExport SEXP _spifa_dlkj_corr_free2(SEXP xSEXP, SEXP KSEXP, SEXP etaSEXP, SEXP logpdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type logpdf(logpdfSEXP);
    rcpp_result_gen = Rcpp::wrap(dlkj_corr_free2(x, K, eta, logpdf));
    return rcpp_result_gen;
END_RCPP
}
// test1
arma::mat test1(arma::vec A, arma::mat B);
RcppExport SEXP _spifa_test1(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(test1(A, B));
    return rcpp_result_gen;
END_RCPP
}
// testing
Rcpp::List testing(arma::mat X, arma::vec y);
RcppExport SEXP _spifa_testing(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(testing(X, y));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _spifa_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// matmatmat
arma::mat matmatmat(arma::mat x);
RcppExport SEXP _spifa_matmatmat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(matmatmat(x));
    return rcpp_result_gen;
END_RCPP
}
// matmat
arma::mat matmat(arma::mat x);
RcppExport SEXP _spifa_matmat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(matmat(x));
    return rcpp_result_gen;
END_RCPP
}
// ar_chol
arma::mat ar_chol(arma::mat x);
RcppExport SEXP _spifa_ar_chol(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ar_chol(x));
    return rcpp_result_gen;
END_RCPP
}
// mat_inv
arma::mat mat_inv(arma::mat x);
RcppExport SEXP _spifa_mat_inv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_inv(x));
    return rcpp_result_gen;
END_RCPP
}
// mat_inv2
arma::mat mat_inv2(arma::mat x);
RcppExport SEXP _spifa_mat_inv2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_inv2(x));
    return rcpp_result_gen;
END_RCPP
}
// inv_chol
arma::mat inv_chol(arma::mat x);
RcppExport SEXP _spifa_inv_chol(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_chol(x));
    return rcpp_result_gen;
END_RCPP
}
// inv_solve
arma::mat inv_solve(arma::mat x, arma::mat eye);
RcppExport SEXP _spifa_inv_solve(SEXP xSEXP, SEXP eyeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eye(eyeSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_solve(x, eye));
    return rcpp_result_gen;
END_RCPP
}
// inv_solve2
arma::mat inv_solve2(arma::mat x, arma::mat eye);
RcppExport SEXP _spifa_inv_solve2(SEXP xSEXP, SEXP eyeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eye(eyeSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_solve2(x, eye));
    return rcpp_result_gen;
END_RCPP
}
// inv_form
arma::mat inv_form(arma::mat x, arma::mat eye);
RcppExport SEXP _spifa_inv_form(SEXP xSEXP, SEXP eyeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eye(eyeSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_form(x, eye));
    return rcpp_result_gen;
END_RCPP
}
// rcpptn_hello_world
List rcpptn_hello_world();
RcppExport SEXP _spifa_rcpptn_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpptn_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spifa_adaptive_haario", (DL_FUNC) &_spifa_adaptive_haario, 3},
    {"_spifa_variance", (DL_FUNC) &_spifa_variance, 1},
    {"_spifa_adaptive_haario_vanish", (DL_FUNC) &_spifa_adaptive_haario_vanish, 3},
    {"_spifa_am_vanish_scaling", (DL_FUNC) &_spifa_am_vanish_scaling, 3},
    {"_spifa_vec2mat", (DL_FUNC) &_spifa_vec2mat, 3},
    {"_spifa_vec2matt", (DL_FUNC) &_spifa_vec2matt, 3},
    {"_spifa_vecsub", (DL_FUNC) &_spifa_vecsub, 3},
    {"_spifa_vecsub1", (DL_FUNC) &_spifa_vecsub1, 2},
    {"_spifa_matsub1", (DL_FUNC) &_spifa_matsub1, 3},
    {"_spifa_TST", (DL_FUNC) &_spifa_TST, 2},
    {"_spifa_subset_cpp", (DL_FUNC) &_spifa_subset_cpp, 2},
    {"_spifa_vec2trimatl", (DL_FUNC) &_spifa_vec2trimatl, 3},
    {"_spifa_vec2trimatl_old", (DL_FUNC) &_spifa_vec2trimatl_old, 3},
    {"_spifa_vec2trimatl_test", (DL_FUNC) &_spifa_vec2trimatl_test, 3},
    {"_spifa_trimatl2vec", (DL_FUNC) &_spifa_trimatl2vec, 2},
    {"_spifa_vec2chol_corr", (DL_FUNC) &_spifa_vec2chol_corr, 2},
    {"_spifa_vec2chol_corr2", (DL_FUNC) &_spifa_vec2chol_corr2, 2},
    {"_spifa_chol_corr2vec", (DL_FUNC) &_spifa_chol_corr2vec, 1},
    {"_spifa_solve_sympd", (DL_FUNC) &_spifa_solve_sympd, 2},
    {"_spifa_solve_sympd_chol", (DL_FUNC) &_spifa_solve_sympd_chol, 2},
    {"_spifa_rimvnorm_Q_eig", (DL_FUNC) &_spifa_rimvnorm_Q_eig, 1},
    {"_spifa_rmvnorm_rest_Q", (DL_FUNC) &_spifa_rmvnorm_rest_Q, 4},
    {"_spifa_rmvnorm_Q", (DL_FUNC) &_spifa_rmvnorm_Q, 2},
    {"_spifa_plop", (DL_FUNC) &_spifa_plop, 0},
    {"_spifa_gamcpp", (DL_FUNC) &_spifa_gamcpp, 6},
    {"_spifa_probit_gp_adap", (DL_FUNC) &_spifa_probit_gp_adap, 5},
    {"_spifa_probit_gp_am", (DL_FUNC) &_spifa_probit_gp_am, 5},
    {"_spifa_probit_gp_am_scale", (DL_FUNC) &_spifa_probit_gp_am_scale, 6},
    {"_spifa_probit_gp_chol", (DL_FUNC) &_spifa_probit_gp_chol, 5},
    {"_spifa_probit_gp_chol2", (DL_FUNC) &_spifa_probit_gp_chol2, 5},
    {"_spifa_probit_gp", (DL_FUNC) &_spifa_probit_gp, 5},
    {"_spifa_dic_cpp", (DL_FUNC) &_spifa_dic_cpp, 8},
    {"_spifa_spifa_cpp", (DL_FUNC) &_spifa_spifa_cpp, 36},
    {"_spifa_predict_spifa_cpp", (DL_FUNC) &_spifa_predict_spifa_cpp, 24},
    {"_spifa_predict2_spifa_cpp", (DL_FUNC) &_spifa_predict2_spifa_cpp, 24},
    {"_spifa_logit", (DL_FUNC) &_spifa_logit, 1},
    {"_spifa_logistic", (DL_FUNC) &_spifa_logistic, 1},
    {"_spifa_ifa_gibbs_nonide", (DL_FUNC) &_spifa_ifa_gibbs_nonide, 5},
    {"_spifa_ifa_gibbs_sp_cov", (DL_FUNC) &_spifa_ifa_gibbs_sp_cov, 15},
    {"_spifa_ifa_gibbs_sp", (DL_FUNC) &_spifa_ifa_gibbs_sp, 14},
    {"_spifa_ifa_gibbs", (DL_FUNC) &_spifa_ifa_gibbs, 5},
    {"_spifa_multi_lm", (DL_FUNC) &_spifa_multi_lm, 5},
    {"_spifa_name_samples_vec", (DL_FUNC) &_spifa_name_samples_vec, 2},
    {"_spifa_name_samples_mat", (DL_FUNC) &_spifa_name_samples_mat, 3},
    {"_spifa_name_samples_lower", (DL_FUNC) &_spifa_name_samples_lower, 4},
    {"_spifa_dmvnorm", (DL_FUNC) &_spifa_dmvnorm, 4},
    {"_spifa_dmvnorm_chol", (DL_FUNC) &_spifa_dmvnorm_chol, 4},
    {"_spifa_dmvnorm_cholinv", (DL_FUNC) &_spifa_dmvnorm_cholinv, 4},
    {"_spifa_dmvnorm_prec", (DL_FUNC) &_spifa_dmvnorm_prec, 3},
    {"_spifa_dinvwish", (DL_FUNC) &_spifa_dinvwish, 4},
    {"_spifa_dlkj_corr", (DL_FUNC) &_spifa_dlkj_corr, 3},
    {"_spifa_dlkj_corr_chol", (DL_FUNC) &_spifa_dlkj_corr_chol, 3},
    {"_spifa_dlkj_corr_free", (DL_FUNC) &_spifa_dlkj_corr_free, 4},
    {"_spifa_dlkj_corr_free2", (DL_FUNC) &_spifa_dlkj_corr_free2, 4},
    {"_spifa_test1", (DL_FUNC) &_spifa_test1, 2},
    {"_spifa_testing", (DL_FUNC) &_spifa_testing, 2},
    {"_spifa_rcpp_hello_world", (DL_FUNC) &_spifa_rcpp_hello_world, 0},
    {"_spifa_matmatmat", (DL_FUNC) &_spifa_matmatmat, 1},
    {"_spifa_matmat", (DL_FUNC) &_spifa_matmat, 1},
    {"_spifa_ar_chol", (DL_FUNC) &_spifa_ar_chol, 1},
    {"_spifa_mat_inv", (DL_FUNC) &_spifa_mat_inv, 1},
    {"_spifa_mat_inv2", (DL_FUNC) &_spifa_mat_inv2, 1},
    {"_spifa_inv_chol", (DL_FUNC) &_spifa_inv_chol, 1},
    {"_spifa_inv_solve", (DL_FUNC) &_spifa_inv_solve, 2},
    {"_spifa_inv_solve2", (DL_FUNC) &_spifa_inv_solve2, 2},
    {"_spifa_inv_form", (DL_FUNC) &_spifa_inv_form, 2},
    {"_spifa_rcpptn_hello_world", (DL_FUNC) &_spifa_rcpptn_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_spifa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
